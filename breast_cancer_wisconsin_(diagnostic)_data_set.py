# -*- coding: utf-8 -*-
"""Breast Cancer Wisconsin (Diagnostic) Data Set

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sMC98ZXbklg-ubEquuztg60-1qpw0y_Q

Breast Cancer Wisconsin (Diagnostic) Data Set are given.It is to Predict whether the cancer is benign or malignant from the given dataset by using different model

##Data preprocessing

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sb

"""## Importing the dataset"""

dataset = pd.read_csv('Breast Cancer Wisconsin (Diagnostic) Data Set.csv')
X = dataset.iloc[:, 2:31].values
y = dataset.iloc[:, 1].values

"""##Analyzing the dataset"""

dataset.shape

dataset.info()

dataset.isnull().sum()

dataset.dtypes

dataset['diagnosis'].value_counts()

"""##Removing the columns with all missing values"""

dataset=dataset.dropna(axis=1)

dataset.shape #for checking the number of column and rows

"""## Encoding Categorical Dataset"""

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
y=le.fit_transform(y)

print(y)

"""##Splitting the dataset into training set and test set"""

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=0)

"""## Paireise plots of the dataset"""

sb.pairplot(dataset.iloc[:,1:7],hue="diagnosis")

"""##Feature Scaling

"""

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
X_train=sc.fit_transform(X_train)
X_test=sc.fit_transform(X_test)

print(X_train)

print(X_test)

"""##Training the different models on the training dataset for classification of Benign(B) vs Malignant(M)

###(1) Training the Random Forest classification Model on the training dataset




>
"""

from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators = 20,criterion='entropy', random_state = 0)
classifier.fit(X_train, y_train)

"""#### Predicting the test set result"""

y_pred=classifier.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""####Confusion matrix for Random Forest and accuracy checking with goodness of fitting"""

from sklearn.metrics import confusion_matrix,accuracy_score,r2_score
cm=confusion_matrix(y_test,y_pred)
print(cm)
print(f"the accuracy of the prediction is :{accuracy_score(y_test,y_pred)}")
print(f"the r_square value is:{r2_score(y_test,y_pred)}")

"""### (2) Training the Logistic Regression Model on training dataset"""

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train, y_train)

"""#### Predicting the test set result"""

y_pred=classifier.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""####Confusion matrix for Logistic Regression and accuracy checking with goodness of fitting"""

from sklearn.metrics import confusion_matrix,accuracy_score,r2_score
cm=confusion_matrix(y_test,y_pred)
print(cm)
print(f"the accuracy of the prediction is :{accuracy_score(y_test,y_pred)}")
print(f"the r_square value is:{r2_score(y_test,y_pred)}")

"""###(3) Training the Decision Tree Classification Model on training dataset"""

from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier(criterion = 'entropy',random_state = 0)
classifier.fit(X_train, y_train)

"""####Predicting the test set result"""

y_pred=classifier.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""####Confusion matrix for Decision Tree Classification and accuracy checking with goodness of fitting"""

from sklearn.metrics import confusion_matrix,accuracy_score,r2_score
cm=confusion_matrix(y_test,y_pred)
print(cm)
print(f"the accuracy of the prediction is :{accuracy_score(y_test,y_pred)}")
print(f"the r_square value is:{r2_score(y_test,y_pred)}")